import telebot
import random
from telebot import types

token = 'xxxxx'
bot = telebot.TeleBot(token)

START = '''
–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–Ω—è—Ç—å —Å–≤–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–µ–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å.

–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –¥–µ–ª–∞ –∏ —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. üí°–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ—ç—Ç–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–ª—á–∞—Å–∞".

–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∫–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üé≤–ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è. –Ø —Å–ø—Ä–æ—à—É —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —É—Å–ø–µ—Ç—å —Å–¥–µ–ª–∞—Ç—å.

–ü–æ–µ—Ö–∞–ª–∏! üöÄ
'''

HELP = '''
üìùÔ∏è–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª. –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–ª—á–∞—Å–∞").

üóíÔ∏è–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.

üé≤ –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è? ‚Äì —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—Ä–µ–º–µ–Ω–∏. üö®–ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.
'''

todos = {}

# todos = {
#     "1 —á–∞—Å": ["–ø–æ–∏–≥—Ä–∞—Ç—å", "–ø–æ–±–µ–≥–∞—Ç—å", "–∑–∞–Ω—è—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º"],
#     "–ø–æ–ª —á–∞—Å–∞": ["–ø–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É"],
#     "2 —á–∞—Å–∞": ["–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ", "—É—á–∏—Ç—å Python"]
# }

def get_commands_keyboard():
    commands_keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    button1 = types.KeyboardButton('üí°–ü–æ–º–æ—â—å')
    button2 = types.KeyboardButton('üìùÔ∏è–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
    button3 = types.KeyboardButton('üóíÔ∏è–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
    button4 = types.KeyboardButton('üé≤ –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è?')
    commands_keyboard.add(button1, button2, button3, button4)
    return commands_keyboard

def add_todo(chat_id, time, task):
    time = time.lower()
    if todos.get(chat_id) is None:
        todos[chat_id] = {}
    if todos[chat_id].get(time) is not None:
        todos[chat_id][time].append(task)
    else:
        todos[chat_id][time] = [task]

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, START, reply_markup=get_commands_keyboard())

@bot.message_handler(content_types=['text'])
def help(message):
    chat_id = message.chat.id
    if message.text == 'üí°–ü–æ–º–æ—â—å':
        bot.send_message(chat_id, HELP, reply_markup=get_commands_keyboard())
    elif message.text == 'üóíÔ∏è–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á':
        if not todos.get(chat_id):
            msg = bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏', reply_markup=get_commands_keyboard())
        else:
            tasks_show = ''
            todos_sorted = sorted(todos[chat_id].items())
            for key, value in todos_sorted:
                tasks_show += str(key) + ': ' + str(value).strip("]'[").replace("'", "") + '\n'
            msg = bot.send_message(chat_id, tasks_show, reply_markup=get_commands_keyboard())
    elif message.text == 'üé≤ –ß–µ–º –∑–∞–Ω—è—Ç—å—Å—è?':
        if not todos[chat_id]:
            msg = bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏', reply_markup=get_commands_keyboard())
        else:
            markup = types.InlineKeyboardMarkup()
            markup.row_width = 2
            for key_time in list(todos[chat_id]):
                markup.add(types.InlineKeyboardButton(key_time, callback_data=key_time))
            bot.send_message(chat_id, f'–°–∫–æ–ª—å–∫–æ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏?', reply_markup=markup)
    elif message.text == 'üìùÔ∏è–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É':
        msg = bot.send_message(chat_id, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?')
        bot.register_next_step_handler(msg, add_task)

def add_task(message):
    task = message.text.lower()
    msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç?')
    bot.register_next_step_handler(msg, add_time, task)

def add_time(message, task):
    chat_id = message.chat.id
    time = message.text.lower()
    add_todo(chat_id, time, task)
    text = '‚úÖ –î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ "' + task + '" –∑–∞ ' + time
    bot.send_message(chat_id, text, reply_markup=get_commands_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def random_task(call):
    chat_id = call.message.chat.id
    time = call.data
    if time in todos[chat_id]:
        random_task = random.choice(todos[chat_id][time])
        for tasks in todos[chat_id].values():
            if random_task in tasks:
                tasks.remove(random_task)
        if todos[chat_id].get(time) is not None and len(todos[chat_id][time]) == 0:
            todos[chat_id].pop(time)
    else:
        random_task = '–¢–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç'
    bot.send_message(chat_id, f'‚úÖ –¢—ã –º–æ–∂–µ—à—å ¬´{random_task}¬ª', reply_markup=get_commands_keyboard())


bot.polling(none_stop=True)
